const locales = require('../locales/index').list;
const {UnsupportedLocaleError, UnsupportedCallbackTypeError} = require('../errors');
const format = require('../methods/format');
const maximise = require('../methods/maximise');

class TimeConstruct {
    constructor(ms = 0, seconds = 0, minutes = 0, hours = 0, days = 0, weeks = 0, months = 0, years = 0, raw, config) {
        if (!config) {
            config = {
                format: false,
                locale: 'EN'
            };
        }
        this.locale = config.locale;
        this.rawString = raw;
        this.milliseconds = Number(ms);
        this.seconds = Number(seconds);
        this.minutes = Number(minutes);
        this.hours = Number(hours);
        this.days = Number(days);
        this.weeks = Number(weeks);
        this.months = Number(months);
        this.years = Number(years);
        this.duration = this.toMS();
        if (config.format === true) this.balance();
    }

    balance() {
        if (this.milliseconds >= 1000) {
            while (this.milliseconds >= 1000) {
                this.seconds++;
                this.milliseconds = this.milliseconds - 1000;
            }
        }
        if (this.seconds >= 60) {
            while (this.seconds >= 60) {
                this.minutes++;
                this.seconds = this.seconds - 60;
            }
        }
        if (this.minutes >= 60) {
            while (this.minutes > 60) {
                this.hours++;
                this.minutes = this.minutes - 60;
            }
        }
        if (this.hours >= 24) {
            while (this.hours > 24) {
                this.days++;
                this.hours = this.hours - 24;
            }
        }
        if (this.days >= 7) {
            while (this.days > 7) {
                this.weeks++;
                this.days = this.days - 7;
            }
        }
        if (this.weeks >= 4.28571428571) {
            while (this.weeks >= 4.28571428571) {
                this.months++;
                this.weeks = this.weeks - 4;
            }
        }
        if (this.months >= 12) {
            while (this.months >= 12) {
                this.years++;
                this.months = this.months - 12;
            }
        }
    }

    toMS() {
        let ms = this.milliseconds;
        let months = this.months + (this.years * 12);
        let weeks = this.weeks + (months * 30);
        let days = this.days + (weeks * 7);
        let hours = this.hours + (days * 24);
        let minutes = this.minutes + (hours * 60);
        let seconds = this.seconds + (minutes * 60);
        return Number(ms + (seconds * 1000))
    }

    format(string, locale = this.locale) {
        return format(string, this, locale);
    }

    into(string, locale = this.locale) {
        return maximise(string, this, locale);
    }

    setLocale(locale) {
        if (locales.includes(locale.toUpperCase())) {
            this.locale = locale.toUpperCase();
        } else {
            throw new UnsupportedLocaleError(`${locale.toUpperCase()} is not a supported locale.`);
        }
    }

    awaitDuration(callback) {
        if (callback) {
            if (typeof callback === 'function') {
                setTimeout(() => {
                    callback();
                }, this.duration);
            } else {
                throw new UnsupportedCallbackTypeError('Callback should be a Function.')
            }
        } else {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    resolve();
                }, this.duration);
            });
        }
    }

    sleep() {
        return new Promise((resolve, reject) => {
            setTimeout(() => {
                resolve();
            }, this.duration);
        });
    }
}

module.exports = TimeConstruct;