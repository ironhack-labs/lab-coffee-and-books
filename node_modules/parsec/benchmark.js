let runAmount = process.argv[2];
runAmount = runAmount !== undefined?runAmount:50;
/*
* Entirely for benchmarking performance stats, ignore this until next comment
 */
class Timer {
    start(name = "") {
        this.nanoTimeStart = process.hrtime.bigint();
        this.name = name;
        this.measure = 0;
        this.measures = ['Nanoseconds', 'Microseconds', 'Milliseconds', 'Seconds', 'Minutes', 'Hours'];
    }

    stopSilent() {
        return Number(process.hrtime.bigint() - this.nanoTimeStart);
    }

    init() {
        let cells = ["Test Name", "Time (avg)", 'Unit'];
        this.name = '';
        cells.forEach(cell => {
            while (cell.length < 30 && cells.indexOf(cell) !== (cells.length - 1)) {
                cell += ' ';
            }
            this.name += cell;
        })
        console.log(this.name);
    }

    calcAVG(times) {
        let measure = 0
        let measures = ['Nanoseconds', 'Microseconds', 'Milliseconds', 'Seconds', 'Minutes', 'Hours'];
        let total = 0;
        //console.log(times)
        times.forEach(time => {
            total += time;
        })
        total = (total / times.length);
        let time = Number(total)
        while (time > 1000) {
            time = Number(time / 1000);
            measure += 1;
        }
        time = time.toFixed(2).toString();
        while (this.name.length < 29) {
            this.name += ' ';
        }
        time = format(time.split('.')[0]) + '.' + time.split('.')[1];
        while(time.length < 29){
            time+=' ';
        }
        let name = `\x1b[32m${this.name}\x1b[0m`;
        console.log(name, time, measures[measure]);
    }
}

let timer = new Timer();

function format(x) {
    return x.replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}

/*
* You can start modifying the code from here onwards:
 */
let timeConstruct;
const ParSec = require('./index');
timer.init();
let results = [];
for(let i = 0; i<runAmount; i++){
    timer.start('TestParSec.setLocale()');
     ParSec.setLocale('en');
    results.push(timer.stopSilent());
}
timer.calcAVG(results);

results = [];
for(let i = 0; i<runAmount; i++){
    timer.start('TestParSec()');
    timeConstruct = ParSec('1000ms 1000s 1000m 1000h 1000d 1000w 1000mo 1000y');
    results.push(timer.stopSilent());
}
timer.calcAVG(results);

results = [];
for(let i = 0; i<runAmount; i++){
    timer.start('TestParSec.parse()');
    let tc = ParSec.parse('1000ms 1000s 1000m 1000h 1000d 1000w 1000mo 1000y');
    results.push(timer.stopSilent());
}
timer.calcAVG(results);

results = [];
for(let i = 0; i<runAmount; i++){
    timer.start('TestParSec.format()');
    let formatted = timeConstruct.format('{MILLISECONDS} {SECONDS} {MINUTES} {HOURS} {DAYS} {WEEKS} {MONTHS} {YEARS}');
    results.push(timer.stopSilent());
}
timer.calcAVG(results);
console.log(`\x1b[32mBenchmark complete\x1b[0m`)